// Code generated by MockGen. DO NOT EDIT.
// Source: internal/menu/model.go

// Package menu_test is a generated GoMock package.
package menu_test

import (
	context "context"
	menu "menu_manager/internal/menu"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetMeal mocks base method.
func (m *MockService) GetMeal(ctx context.Context, userID string) (*menu.Meal, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeal", ctx, userID)
	ret0, _ := ret[0].(*menu.Meal)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMeal indicates an expected call of GetMeal.
func (mr *MockServiceMockRecorder) GetMeal(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeal", reflect.TypeOf((*MockService)(nil).GetMeal), ctx, userID)
}

// GetMenu mocks base method.
func (m *MockService) GetMenu(ctx context.Context, userID string) ([]menu.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenu", ctx, userID)
	ret0, _ := ret[0].([]menu.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenu indicates an expected call of GetMenu.
func (mr *MockServiceMockRecorder) GetMenu(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenu", reflect.TypeOf((*MockService)(nil).GetMenu), ctx, userID)
}

// RescheduleMenu mocks base method.
func (m *MockService) RescheduleMenu(ctx context.Context, currentMenu []menu.Menu, userID string) ([]menu.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescheduleMenu", ctx, currentMenu, userID)
	ret0, _ := ret[0].([]menu.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RescheduleMenu indicates an expected call of RescheduleMenu.
func (mr *MockServiceMockRecorder) RescheduleMenu(ctx, currentMenu, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescheduleMenu", reflect.TypeOf((*MockService)(nil).RescheduleMenu), ctx, currentMenu, userID)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// LoadMeal mocks base method.
func (m *MockStore) LoadMeal(ctx context.Context, MealID string) (*menu.Meal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadMeal", ctx, MealID)
	ret0, _ := ret[0].(*menu.Meal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadMeal indicates an expected call of LoadMeal.
func (mr *MockStoreMockRecorder) LoadMeal(ctx, MealID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMeal", reflect.TypeOf((*MockStore)(nil).LoadMeal), ctx, MealID)
}

// LoadMenu mocks base method.
func (m *MockStore) LoadMenu(ctx context.Context, userID string) ([]menu.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadMenu", ctx, userID)
	ret0, _ := ret[0].([]menu.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadMenu indicates an expected call of LoadMenu.
func (mr *MockStoreMockRecorder) LoadMenu(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMenu", reflect.TypeOf((*MockStore)(nil).LoadMenu), ctx, userID)
}

// UpdateMenu mocks base method.
func (m *MockStore) UpdateMenu(ctx context.Context, userID string, menuList []menu.Menu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMenu", ctx, userID, menuList)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMenu indicates an expected call of UpdateMenu.
func (mr *MockStoreMockRecorder) UpdateMenu(ctx, userID, menuList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMenu", reflect.TypeOf((*MockStore)(nil).UpdateMenu), ctx, userID, menuList)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetProducts mocks base method.
func (m *MockClient) GetProducts(ctx context.Context, recipes []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, recipes)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockClientMockRecorder) GetProducts(ctx, recipes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockClient)(nil).GetProducts), ctx, recipes)
}
